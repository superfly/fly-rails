# syntax = docker/dockerfile:1

FROM <%= @image %> as base
LABEL fly_launch_runtime="rails"

ENV RAILS_ENV=production
<% if @anycable or not @passenger -%>
ENV RAILS_LOG_TO_STDOUT true
<% end -%>
<% unless @passenger -%>
ENV RAILS_SERVE_STATIC_FILES true
<% end -%>
ENV PORT 8080

RUN mkdir /app
WORKDIR /app

<% if @node -%>
RUN curl https://get.volta.sh | bash
ENV VOLTA_HOME /root/.volta
ENV PATH $VOLTA_HOME/bin:/usr/local/bin:$PATH
RUN volta install node@<%= @node_version %> yarn@<%= @yarn_version %> && \
    gem update --system --no-document && \
    gem install --no-document bundler --version <%= @bundler_version %>

<% else -%>
RUN gem update --system --no-document && \
    gem install --no-document bundler --version <%= @bundler_version %>

<% end -%>
#######################################################################

# install packages only needed at build time

FROM base as build_deps

<% 
  @build_packages = %w(git build-essential wget curl gzip xz-utils)
  @build_packages << 'libpq-dev' if @postgresql
  @build_packages << 'libsqlite3-dev' if @sqlite3
  @build_packages << 'default-libmysqlclient-dev' if @mysql
  @build_packages += %w[pkg-config libmagickwand-dev] if @rmagick
-%>
RUN --mount=type=cache,id=dev-apt-cache,sharing=locked,target=/var/cache/apt \
    --mount=type=cache,id=dev-apt-lib,sharing=locked,target=/var/lib/apt \
    apt-get update -qq && \
    apt-get install --no-install-recommends --yes \
    <%= @build_packages.join(' ') %>

#######################################################################

# install gems

FROM build_deps as gems

COPY Gemfile* ./
RUN --mount=type=cache,id=dev-gem-cache,sharing=locked,target=/srv/vendor \
    bundle config set app_config .bundle && \
    bundle config set without 'development test' && \
    bundle lock --add-platform x86_64-linux && \
    bundle config set path /srv/vendor && \
    bundle install && \
    mkdir -p vendor && \
    bundle config set path vendor && \
    cp -ar /srv/vendor .

<% if @node -%>
#######################################################################

# install node modules

FROM build_deps as node_modules

<% if @puppeteer -%>
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD true

<% end -%>
COPY package*json ./
<% if @yarn -%>
COPY yarn.* ./
RUN yarn install
<% else -%>
RUN npm install
<% end -%>

<% end -%>
#######################################################################
<% if @litefs -%>

# Fetch the LiteFS binary
FROM flyio/litefs:pr-109 AS litefs

#######################################################################
<% end -%>
<% if @anycable -%>

# Build anycable
FROM golang:1.18 as go
RUN GOBIN=/usr/local/bin/ go install github.com/anycable/anycable-go/cmd/anycable-go@latest

#######################################################################
<% end -%>

# install deployment packages

FROM base

<% if @passenger -%>
# add passenger repository
RUN apt-get install -y dirmngr gnupg apt-transport-https ca-certificates curl && \
  curl https://oss-binaries.phusionpassenger.com/auto-software-signing-gpg-key.txt | \
    gpg --dearmor > /etc/apt/trusted.gpg.d/phusion.gpg && \
  sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger $(sed -n 's/VERSION_CODENAME=\(.*\)$/\1/p' /etc/os-release) main > /etc/apt/sources.list.d/passenger.list'

<% end -%>
<% if @puppeteer -%>
# add google chrome repository
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
 && echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list

<% end -%>
<% if @postgresql -%>
# add postgres repository
RUN curl -sSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
  && echo "deb http://apt.postgresql.org/pub/repos/apt/ $(sed -n 's/VERSION_CODENAME=\(.*\)$/\1/p' /etc/os-release)-pgdg main" 14 > /etc/apt/sources.list.d/pgdg.list
<% end -%>
# nginx: <%= @nginx.inspect %>
<%
  @deploy_packages = []
  @deploy_packages << 'nginx' if @nginx
  @deploy_packages += %w(passenger libnginx-mod-http-passenger) if @passenger
  @deploy_packages << 'postgresql-client-14' if @postgresql
  @deploy_packages << 'libsqlite3-0' if @sqlite3
  @deploy_packages << 'default-mysql-client' if @mysql
  @deploy_packages << 'google-chrome-stable' if @puppeteer
  @deploy_packages << 'imagemagick' if @rmagick
  @deploy_packages << 'libvips42' if @image_processing
  @deploy_packages << 'nodejs' if not @node and @bootstrap
  @deploy_packages << 'fuse' if @litefs
  @deploy_packages << 'ruby-foreman' if @procs.length > 1
  @deploy_packages << 'redis-server' if @redis == :internal
  @deploy_packages << 'gettext-base' if @nats
  @deploy_packages += %w(avahi-daemon avahi-utils libnss-mdns) if @avahi
-%>
RUN --mount=type=cache,id=prod-apt-cache,sharing=locked,target=/var/cache/apt \
    --mount=type=cache,id=prod-apt-lib,sharing=locked,target=/var/lib/apt \
    apt-get update -qq && \
    apt-get install --no-install-recommends --yes \
    <%= @deploy_packages.join(' ') %>

<% if @redis == :internal -%>
# configure redis
RUN sed -i 's/^daemonize yes/daemonize no/' /etc/redis/redis.conf &&\
  sed -i 's/^bind/# bind/' /etc/redis/redis.conf &&\
  sed -i 's/^protected-mode yes/protected-mode no/' /etc/redis/redis.conf &&\
  sed -i 's/^logfile/# logfile/' /etc/redis/redis.conf 

<% end -%>
# copy installed gems
COPY --from=gems /app /app
COPY --from=gems /usr/lib/fullstaq-ruby/versions /usr/lib/fullstaq-ruby/versions
COPY --from=gems /usr/local/bundle /usr/local/bundle

<% if @node -%>
# copy installed node modules
COPY --from=node_modules /app/node_modules /app/node_modules

<% end -%>
<% if @anycable -%>
# copy anycable-go
COPY --from=go /usr/local/bin/anycable-go /usr/local/bin/anycable-go

<% end -%>
<% if @litefs -%>
# copy litefs binary
COPY --from=litefs /usr/local/bin/litefs /usr/local/bin/litefs

# Copy our LiteFS configuration.
ADD config/litefs.yml /etc/litefs.yml

# Create mount point
RUN mkdir /data

<% end -%>
<% if @nats -%>
# install nats
RUN mkdir /etc/nats
COPY --from=nats:latest /nats-server /usr/local/bin/nats-server
COPY --from=nats:latest /nats-server.conf /etc/nats/nats-server.conf

<% end -%>
#######################################################################
<% if @avahi -%>

# configure avahi for ipv6
RUN sed -i 's/mdns4_minimal/mdns_minimal/' /etc/nsswitch.conf
<% end -%>
<% if @nginx -%>
<% if @passenger -%>

# configure nginx/passenger
<% if @passenger -%>
<% unless @avahi or @nats -%>
COPY config/nginx.conf /etc/nginx/sites-available/rails.conf
<% end -%>
RUN rm /etc/nginx/sites-enabled/default && \
    ln -s /etc/nginx/sites-available/rails.conf /etc/nginx/sites-enabled/ && \
    sed -i 's/user .*;/user root;/' /etc/nginx/nginx.conf && \
    sed -i '/^include/i include /etc/nginx/main.d/*.conf;' /etc/nginx/nginx.conf && \
    mkdir /etc/nginx/main.d && \
    echo 'env RAILS_MASTER_KEY;' >> /etc/nginx/main.d/env.conf &&\
<% if @redis -%>
    echo 'env REDIS_URL;' >> /etc/nginx/main.d/env.conf &&\
<% end -%>
<% if @anycable -%>
    echo 'env ANYCABLE_RPC_HOST;' >> /etc/nginx/main.d/env.conf &&\
    echo 'env CABLE_URL;' >> /etc/nginx/main.d/env.conf &&\
<% end -%>
    echo 'env RAILS_LOG_TO_STDOUT;' >> /etc/nginx/main.d/env.conf
<% if @serverless -%>
COPY config/hook_detached_process /etc/nginx/
<% end -%>
<% end -%>
<% else -%>

# configure nginx/passenger
COPY <<-"EOF" /etc/nginx/sites-available/rails.conf
<%= render 'nginx.conf.erb' %>
EOF
RUN rm /etc/nginx/sites-enabled/default && \
    ln -s /etc/nginx/sites-available/rails.conf /etc/nginx/sites-enabled/
<% end -%>
<% end -%>

<% if @procs.length > 1 and not @eject -%>
# Define processes
COPY <<-"EOF" ./Procfile.fly
<%= render 'Procfile.fly.erb' %>
EOF

<% end -%>
<% unless @eject -%>
# Define tasks
COPY <<-"EOF" ./lib/tasks/fly.rake
<%= render 'fly.rake.erb' %>
EOF

<% end -%>
# Deploy your application
COPY . .
<% if @bundle_add -%>
COPY --from=gems /app/Gemfile* ./
<% end -%>

# Adjust binstubs to run on Linux and set current working directory
<%= @binfixups %>

<% if @bootsnap -%>
# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile --gemfile app/ lib/

<% end -%>
# Run build task defined in config/fly.rb
RUN SECRET_KEY_BASE=1 bin/rails fly:build

# Start server
<% if @litefs
    @server_command="litefs"
  else
    @server_command="bin/rails fly:server"
  end
-%>
CMD <%= @server_command.split(' ').inspect %>
